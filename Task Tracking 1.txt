import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInAnonymously, onAuthStateChanged, signInWithCustomToken } from 'firebase/auth';
import { 
    getFirestore, 
    doc, 
    setDoc, 
    onSnapshot, 
    collection, 
    addDoc, 
    getDocs,
    updateDoc,
    query,
    where
} from 'firebase/firestore';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';

// --- Helper Functions & Constants ---

const MONTHS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
const METRIC_DEFINITIONS = {
    'Hours': { goal: 50, isEditable: true },
    'Calls': { goal: 200, isEditable: true },
    'Spoke To': { goal: 100, isEditable: true },
    'Listing Appts Set': { goal: 10, isEditable: true },
    'Buyer Appts Set': { goal: 10, isEditable: true },
    'Listing Appts Held': { goal: 8, isEditable: true },
    'Buyer Appts Held': { goal: 8, isEditable: true },
    'Listing Contracts': { goal: 4, isEditable: true },
    'Buyer Contracts': { goal: 4, isEditable: true },
};

const getInitialData = () => {
    const data = {};
    Object.keys(METRIC_DEFINITIONS).forEach(metric => {
        data[metric] = Array(12).fill(0);
    });
    return data;
};

// --- Main App Component ---

export default function App() {
    // --- State Management ---
    const [db, setDb] = useState(null);
    const [auth, setAuth] = useState(null);
    const [userId, setUserId] = useState(null);
    const [isAuthReady, setIsAuthReady] = useState(false);

    const [agents, setAgents] = useState([]);
    const [selectedAgent, setSelectedAgent] = useState(null);
    const [year, setYear] = useState(new Date().getFullYear());
    const [agentData, setAgentData] = useState(null);
    const [loading, setLoading] = useState(true);

    const [newAgentName, setNewAgentName] = useState('');
    const [showAddAgentForm, setShowAddAgentForm] = useState(false);
    
    const [editingCell, setEditingCell] = useState(null); // { metric, monthIndex }
    const [editValue, setEditValue] = useState('');

    const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-real-estate-app';

    // --- Firebase Initialization ---
    useEffect(() => {
        try {
            const firebaseConfig = JSON.parse(typeof __firebase_config !== 'undefined' ? __firebase_config : '{}');
            if (Object.keys(firebaseConfig).length === 0) {
                 console.error("Firebase config is not available.");
                 return;
            }
            const app = initializeApp(firebaseConfig);
            const firestoreDb = getFirestore(app);
            const firebaseAuth = getAuth(app);
            
            setDb(firestoreDb);
            setAuth(firebaseAuth);

            onAuthStateChanged(firebaseAuth, async (user) => {
                if (user) {
                    setUserId(user.uid);
                } else {
                    try {
                         if (typeof __initial_auth_token !== 'undefined' && __initial_auth_token) {
                            await signInWithCustomToken(firebaseAuth, __initial_auth_token);
                         } else {
                            await signInAnonymously(firebaseAuth);
                         }
                    } catch (error) {
                        console.error("Anonymous sign-in failed:", error);
                    }
                }
                setIsAuthReady(true);
            });
        } catch (error) {
            console.error("Error initializing Firebase:", error);
        }
    }, [appId]);
    
    // --- Data Fetching: Agents ---
    useEffect(() => {
        if (!isAuthReady || !db) return;

        const agentsCollectionRef = collection(db, `artifacts/${appId}/public/data/agents`);
        const unsubscribe = onSnapshot(agentsCollectionRef, (snapshot) => {
            const agentsList = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            setAgents(agentsList);
            if (!selectedAgent && agentsList.length > 0) {
                setSelectedAgent(agentsList[0]);
            }
            setLoading(false);
        }, (error) => {
            console.error("Error fetching agents:", error);
            setLoading(false);
        });

        return () => unsubscribe();
    }, [isAuthReady, db, appId, selectedAgent]);

    // --- Data Fetching: Agent's Yearly Data ---
    useEffect(() => {
        if (!selectedAgent || !db) return;

        setLoading(true);
        const dataDocRef = doc(db, `artifacts/${appId}/public/data/agents/${selectedAgent.id}/tracking/${year}`);
        
        const unsubscribe = onSnapshot(dataDocRef, (docSnap) => {
            if (docSnap.exists()) {
                setAgentData(docSnap.data());
            } else {
                // If no data for the year, initialize it
                const initialData = getInitialData();
                setAgentData(initialData);
                setDoc(dataDocRef, initialData).catch(e => console.error("Error creating initial doc:", e));
            }
            setLoading(false);
        }, (error) => {
            console.error("Error fetching agent data:", error);
            setLoading(false);
        });

        return () => unsubscribe();

    }, [selectedAgent, year, db, appId]);


    // --- Event Handlers & Logic ---

    const handleAddAgent = async (e) => {
        e.preventDefault();
        if (!newAgentName.trim() || !db) return;

        try {
            const agentsCollectionRef = collection(db, `artifacts/${appId}/public/data/agents`);
            const newAgentDocRef = await addDoc(agentsCollectionRef, { name: newAgentName.trim() });
            
            // Initialize data for the current year for the new agent
            const initialData = getInitialData();
            const dataDocRef = doc(db, `artifacts/${appId}/public/data/agents/${newAgentDocRef.id}/tracking/${year}`);
            await setDoc(dataDocRef, initialData);

            setNewAgentName('');
            setShowAddAgentForm(false);
            // The onSnapshot listener will automatically update the agents list
        } catch (error) {
            console.error("Error adding agent:", error);
        }
    };

    const handleCellClick = (metric, monthIndex, value) => {
        if (!METRIC_DEFINITIONS[metric]?.isEditable) return;
        setEditingCell({ metric, monthIndex });
        setEditValue(value);
    };

    const handleEditValueChange = (e) => {
        setEditValue(e.target.value);
    };
    
    const handleSaveEdit = async () => {
        if (!editingCell || !db || !selectedAgent) return;

        const { metric, monthIndex } = editingCell;
        const newValue = parseInt(editValue, 10);
        if (isNaN(newValue)) {
            setEditingCell(null);
            return;
        }

        const dataDocRef = doc(db, `artifacts/${appId}/public/data/agents/${selectedAgent.id}/tracking/${year}`);
        
        const updatedMetricArray = [...agentData[metric]];
        updatedMetricArray[monthIndex] = newValue;

        try {
            await updateDoc(dataDocRef, {
                [metric]: updatedMetricArray
            });
            setEditingCell(null);
        } catch (error) {
            console.error("Error updating cell:", error);
        }
    };

    const handleEditKeyDown = (e) => {
        if (e.key === 'Enter') {
            handleSaveEdit();
        } else if (e.key === 'Escape') {
            setEditingCell(null);
        }
    };

    // --- Calculated Values ---
    const calculatedMetrics = useMemo(() => {
        if (!agentData) return {};
        const newMetrics = {};

        const listingApptsSet = agentData['Listing Appts Set'] || Array(12).fill(0);
        const buyerApptsSet = agentData['Buyer Appts Set'] || Array(12).fill(0);
        newMetrics['Total Appts Set'] = listingApptsSet.map((v, i) => v + buyerApptsSet[i]);

        const listingApptsHeld = agentData['Listing Appts Held'] || Array(12).fill(0);
        const buyerApptsHeld = agentData['Buyer Appts Held'] || Array(12).fill(0);
        newMetrics['Total Appts Held'] = listingApptsHeld.map((v, i) => v + buyerApptsHeld[i]);

        const listingContracts = agentData['Listing Contracts'] || Array(12).fill(0);
        const buyerContracts = agentData['Buyer Contracts'] || Array(12).fill(0);
        newMetrics['Total Contracts'] = listingContracts.map((v, i) => v + buyerContracts[i]);
        
        return newMetrics;
    }, [agentData]);

    const chartData = useMemo(() => {
        if (!agentData) return [];
        const totalApptsSet = calculatedMetrics['Total Appts Set'] || [];
        const totalContracts = calculatedMetrics['Total Contracts'] || [];
        
        return MONTHS.map((month, i) => ({
            name: month,
            'Appointments Set': totalApptsSet[i] || 0,
            'Contracts Signed': totalContracts[i] || 0,
        }));
    }, [agentData, calculatedMetrics]);

    // --- Render Logic ---
    if (!isAuthReady) {
        return <div className="flex items-center justify-center h-screen bg-gray-100"><div className="text-xl font-semibold">Authenticating...</div></div>;
    }
    
    return (
        <div className="bg-gray-50 min-h-screen font-sans text-gray-800">
            <div className="container mx-auto p-4 sm:p-6 lg:p-8">
                
                {/* Header */}
                <header className="flex flex-wrap justify-between items-center mb-6 pb-4 border-b-2 border-indigo-100">
                    <div>
                        <h1 className="text-3xl font-bold text-indigo-700">Real Estate Performance Tracker</h1>
                        <p className="text-gray-500 mt-1">A collaborative dashboard for agent productivity.</p>
                        {userId && <p className="text-xs text-gray-400 mt-1">Your User ID: {userId}</p>}
                    </div>
                    <div className="flex items-center space-x-2 mt-4 sm:mt-0">
                         <label htmlFor="year-select" className="text-sm font-medium">Year:</label>
                         <select
                            id="year-select"
                            value={year}
                            onChange={(e) => setYear(parseInt(e.target.value))}
                            className="p-2 border rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
                        >
                            {[...Array(10).keys()].map(i => new Date().getFullYear() - 5 + i).map(y => (
                                <option key={y} value={y}>{y}</option>
                            ))}
                        </select>
                    </div>
                </header>

                {/* Agent Selection & Management */}
                <div className="mb-8 p-4 bg-white rounded-lg shadow-sm">
                   <div className="flex flex-wrap items-center justify-between">
                       <h2 className="text-xl font-semibold text-gray-700 mb-3 sm:mb-0">Select Agent</h2>
                       <button
                           onClick={() => setShowAddAgentForm(!showAddAgentForm)}
                           className="px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors text-sm font-medium"
                       >
                           {showAddAgentForm ? 'Cancel' : '+ Add Agent'}
                       </button>
                   </div>
                   {showAddAgentForm && (
                        <form onSubmit={handleAddAgent} className="mt-4 p-4 bg-gray-50 rounded-md border">
                            <label htmlFor="agent-name" className="block text-sm font-medium text-gray-600 mb-1">New Agent Name</label>
                            <div className="flex space-x-2">
                                <input
                                    id="agent-name"
                                    type="text"
                                    value={newAgentName}
                                    onChange={(e) => setNewAgentName(e.target.value)}
                                    placeholder="e.g., Jane Doe"
                                    className="flex-grow p-2 border rounded-md"
                                    required
                                />
                                <button type="submit" className="px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600">Save</button>
                            </div>
                        </form>
                   )}
                    <div className="mt-4 flex flex-wrap gap-2">
                        {agents.map(agent => (
                            <button
                                key={agent.id}
                                onClick={() => setSelectedAgent(agent)}
                                className={`px-3 py-1.5 rounded-full text-sm font-semibold transition-all duration-200 ${selectedAgent?.id === agent.id ? 'bg-indigo-700 text-white shadow-md' : 'bg-white text-gray-700 hover:bg-indigo-100 border'}`}
                            >
                                {agent.name}
                            </button>
                        ))}
                    </div>
                </div>

                {/* Main Content: Tracker and Chart */}
                {loading && <div className="text-center p-8">Loading Agent Data...</div>}
                {!loading && !selectedAgent && agents.length > 0 && <div className="text-center p-8 text-gray-500">Please select an agent to view their data.</div>}
                {!loading && agents.length === 0 && (
                     <div className="text-center p-8 bg-white rounded-lg shadow">
                        <h3 className="text-lg font-semibold">No agents found.</h3>
                        <p className="text-gray-500">Click "+ Add Agent" to get started.</p>
                     </div>
                )}
                {!loading && selectedAgent && agentData && (
                    <>
                        {/* --- Chart --- */}
                         <div className="mb-8 p-4 bg-white rounded-lg shadow-sm">
                             <h3 className="text-xl font-semibold text-gray-700 mb-4">{`Monthly Performance for ${selectedAgent.name} (${year})`}</h3>
                             <div style={{ width: '100%', height: 300 }}>
                                <ResponsiveContainer>
                                    <BarChart data={chartData} margin={{ top: 5, right: 20, left: -10, bottom: 5 }}>
                                        <CartesianGrid strokeDasharray="3 3" stroke="#e0e0e0" />
                                        <XAxis dataKey="name" />
                                        <YAxis />
                                        <Tooltip wrapperClassName="rounded-md shadow-lg" />
                                        <Legend />
                                        <Bar dataKey="Appointments Set" fill="#4f46e5" />
                                        <Bar dataKey="Contracts Signed" fill="#10b981" />
                                    </BarChart>
                                </ResponsiveContainer>
                             </div>
                         </div>
                    
                        {/* --- Data Table --- */}
                        <div className="overflow-x-auto bg-white rounded-lg shadow-sm">
                            <table className="min-w-full divide-y divide-gray-200">
                                <thead className="bg-gray-50">
                                    <tr>
                                        <th className="px-4 py-3 text-left text-xs font-bold text-gray-600 uppercase tracking-wider sticky left-0 bg-gray-50 z-10">Metric</th>
                                        {MONTHS.map(month => <th key={month} className="px-4 py-3 text-center text-xs font-bold text-gray-600 uppercase tracking-wider">{month}</th>)}
                                        <th className="px-4 py-3 text-center text-xs font-bold text-gray-600 uppercase tracking-wider">Total</th>
                                        <th className="px-4 py-3 text-center text-xs font-bold text-gray-600 uppercase tracking-wider">Goal</th>
                                        <th className="px-4 py-3 text-center text-xs font-bold text-gray-600 uppercase tracking-wider">Variance</th>
                                    </tr>
                                </thead>
                                <tbody className="bg-white divide-y divide-gray-200">
                                    {Object.entries({ ...agentData, ...calculatedMetrics }).map(([metric, monthlyValues]) => {
                                        const definition = METRIC_DEFINITIONS[metric];
                                        const isEditable = definition?.isEditable;
                                        
                                        const total = monthlyValues.reduce((a, b) => a + b, 0);
                                        const goal = definition ? (definition.goal * 12) : null;
                                        const variance = goal !== null ? total - goal : null;

                                        return (
                                            <tr key={metric} className={!isEditable ? "bg-gray-50" : "hover:bg-indigo-50"}>
                                                <td className="px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-800 sticky left-0 bg-white z-10">{metric}</td>
                                                {monthlyValues.map((value, i) => (
                                                    <td key={i} className={`px-4 py-3 text-center text-sm ${isEditable ? 'cursor-pointer' : ''}`} onClick={() => handleCellClick(metric, i, value)}>
                                                        {editingCell?.metric === metric && editingCell?.monthIndex === i ? (
                                                            <input
                                                                type="number"
                                                                value={editValue}
                                                                onChange={handleEditValueChange}
                                                                onBlur={handleSaveEdit}
                                                                onKeyDown={handleEditKeyDown}
                                                                className="w-16 text-center p-1 border rounded-md bg-white"
                                                                autoFocus
                                                            />
                                                        ) : (
                                                            <span>{value}</span>
                                                        )}
                                                    </td>
                                                ))}
                                                <td className="px-4 py-3 text-center text-sm font-bold text-gray-700">{total}</td>
                                                <td className="px-4 py-3 text-center text-sm text-gray-500">{goal !== null ? goal : 'N/A'}</td>
                                                <td className={`px-4 py-3 text-center text-sm font-bold ${variance === null ? '' : (variance >= 0 ? 'text-green-600' : 'text-red-600')}`}>
                                                    {variance !== null ? variance : 'N/A'}
                                                </td>
                                            </tr>
                                        )
                                    })}
                                </tbody>
                            </table>
                        </div>
                    </>
                )}

            </div>
        </div>
    );
}
